<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.IStudentDao">
    <!-- parameterType可以省略不写 -->
    <insert id="insertStudent" parameterType="Student">
		insert into student(name,age,score) values(#{name},#{age},#{score})
	</insert>

    <insert id="insertStudentCacheId" parameterType="Student">
        insert into student(name,age,score) values(#{name},#{age},#{score})
        <!-- 指定结果类型resultType，keyProperty是属性，自动返回到属性id中，order是次序，after是指获取id是在于插入后 -->
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select @@identity
        </selectKey>
    </insert>

    <!-- 删除 -->
    <delete id="deleteStudentById" >
        delete from student where id=#{id}  <!-- 这里的id放什么都可以，只是一个占位符，不表示什么 -->
    </delete>

    <!--<update id="updateStudent">
		update student set name=#{name},age=#{age},score=#{score} where id=#{id}
	</update>-->
    <update id="updateStudent">
		update student
		<set>
            <!-- 第一个if标签的逗号一定要有，最后一个标签的逗号可以没有-->
            <if test="name != null"> name=#{name},</if>
            <if test="age != null">age=#{age},</if>
            <if test="score != null"> score=#{score},</if>
        </set>
         where id=#{id}
	</update>
    <!-- 查询列表 -->
    <!-- 系统不知道返回封装为什么类型，所以要注明返回类型 -->
    <select id="selectAllStudents" resultType="Student">
        select id,name,age,score from student
        <!-- 如果数据库为tid，tname，tage，那么我们可以使用别名
        select tid id,tname name,tage age,tscore score from student -->
    </select>
    <!-- 通过id来查询学生 -->
    <select id="selectStudentById" resultType="Student">
		select * from student where id=#{xxx}

	</select>
    <!-- 模糊查询-->
    <!-- 不能写成'%#{name}%' -->
    <!-- 可以写成这样，也就是使函数拼接 select id,name,age,score from student where name like concat('%',#{xxx},'%') -->
    <!-- 也可以写成这样，‘’引起来的是写死的，而变量是不可以引起来的select id,name,age,score from student where name like '%' #{xxx} '%' -->
    <!-- '%' #{xxx} '%'中间必须有空格，要不就无效了 -->
    <select id="selectStudentsByName" resultType="Student">
        <!--最常用的（动态参数） select id,name,age,score from student where name like '%' #{name} '%' -->
        <!-- 下面的是字符串拼接 ，只能写value，了解即可，容易sql注入，执行效率低，不建议使用-->
        select id,name,age,score from student where name like '%${value}%'
    </select>

    <!-- 接受多个参数Map -->
    <select id="selectStudentByNameAndAge" resultType="Student">
        <!--最常用的（动态参数） select id,name,age,score from student where name like '%' #{name} '%' -->
        <!-- 下面的是字符串拼接 ，只能写value，了解即可，容易sql注入，执行效率低，不建议使用-->
        select id,name,age,score from student where name like '%' #{nameCon} '%' and age> #{ageCon}
        and score> #{stu.score}
    </select>


    <!-- 接受多个参数索引 -->
    <select id="selectStudentByCondition" resultType="Student">
        <!--最常用的（动态参数） select id,name,age,score from student where name like '%' #{name} '%' -->
        <!-- 下面的是字符串拼接 ，只能写value，了解即可，容易sql注入，执行效率低，不建议使用-->
        select id,name,age,score from student where name like '%' #{0} '%' and age> #{1}
        and score> #{2}
    </select>

    <!-- 动态sql if标签-->
    <!-- &可以使用and来代替 ，注意！=需要连在一起写-->
    <select id="selectStudentByDynamicSQL" resultType="Student">
        <!--最常用的（动态参数） select id,name,age,score from student where name like '%' #{name} '%' -->
        <!-- 下面的是字符串拼接 ，只能写value，了解即可，容易sql注入，执行效率低，不建议使用-->
        select id,name,age,score
        from student
        where 1=1
        <if test="name != null and name != ''">
            and name like '%' #{name} '%'
        </if>
        <if test="age > 0">
            and age > #{age}
        </if>
    </select>
    <!-- 动态sql -->
    <!-- &可以使用and来代替 ，注意！=需要连在一起写-->
    <!--<select id="selectStudentByDynamicSQLWhere" resultType="Student">
        &lt;!&ndash;最常用的（动态参数） select id,name,age,score from student where name like '%' #{name} '%' &ndash;&gt;
        &lt;!&ndash; 下面的是字符串拼接 ，只能写value，了解即可，容易sql注入，执行效率低，不建议使用&ndash;&gt;
        select id,name,age,score
        from student
        <where>
            <if test="name != null and name != ''">
                and name like '%' #{name} '%'
            </if>
            <if test="age > 0">
                and age > #{age}
            </if>
        </where>
    </select>-->
    <select id="selectStudentByDynamicSQLWhere" resultType="Student">
        <!--最常用的（动态参数） select id,name,age,score from student where name like '%' #{name} '%' -->
        <!-- 下面的是字符串拼接 ，只能写value，了解即可，容易sql注入，执行效率低，不建议使用-->
        select id,name,age,score
        from student
        <trim prefix="where" prefixOverrides="and">
            <if test="name != null and name != ''">
                and name like '%' #{name} '%'
            </if>
            <if test="age > 0">
                and age > #{age}
            </if>
        </trim>
    </select>
    <!-- 	selectStudentByDynamicSQLChoose 类似于switch，满足后就不会判断后面的了-->
    <!-- 如果名字不为空，那么按照名字来查询，如果名字为空，就按照年龄来查询，如果没有查询条件，就没有查询条件 -->
    <select id="selectStudentByDynamicSQLChoose" resultType="Student">
        <!--最常用的（动态参数） select id,name,age,score from student where name like '%' #{name} '%' -->
        <!-- 下面的是字符串拼接 ，只能写value，了解即可，容易sql注入，执行效率低，不建议使用-->
        select id,name,age,score
        from student
        <where>
            <choose>
                <when test="name != null and name != ''">
                    and name like '%' #{name} '%'
                </when>
                <when test="age > 0">
                    and age > #{age}
                </when>
                <otherwise>
                    and 1 != 1
                </otherwise>
            </choose>
        </where>
    </select>


    <!-- selectStudentByDynamicSQLForeachArray -->
    <!-- select * from student where id in (1,3) -->
    <select id="selectStudentByDynamicSQLForeachArray" resultType="Student">
        select id,name,age,score
        from student
        <if test="array !=null and array.length > 0 ">
            where id in
            <foreach collection="array" open="(" close=")" item="myid" separator=",">
                #{myid}
            </foreach>
        </if>
    </select>
    <!-- selectStudentByDynamicSQLForeachList -->
    <select id="selectStudentByDynamicSQLForeachList" resultType="Student">
        select id,name,age,score
        from student
        <if test="list !=null and list.size > 0 ">
            where id in
            <foreach collection="list" open="(" close=")" item="myid" separator=",">
                #{myid}
            </foreach>
        </if>
    </select>

    <select id="selectStudentByDynamicSQLForeachListStudent" resultType="Student">
        select id,name,age,score
        from student
        <if test="list !=null and list.size > 0 ">
            where id in
            <foreach collection="list" open="(" close=")" item="stu" separator=",">
                #{stu.id}
            </foreach>
        </if>
    </select>
    <sql id="selectHead">
		select id,name,age,score
		 from student
	</sql>
    <!-- 可读性比较差 -->
    <select id="selectStudentByDynamicSQLfragment" resultType="Student">
        <include refid="selectHead"></include>
        <if test="list !=null and list.size > 0 ">
            where id in
            <foreach collection="list" open="(" close=")" item="stu" separator=",">
                #{stu.id}
            </foreach>
        </if>
    </select>
</mapper>